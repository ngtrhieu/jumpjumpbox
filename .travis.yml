language: shell

os: linux
dist: xenial

# Define stage order
stages:
  - test # Run unit tests, make sure all tests passed
  - build # Build content, apk, xcode proj, ...
  - archive # (ios only) build xcode to iap
  - deploy # Upload build to app distribution (master) or app store/google play (staging/production)

branches:
  only:
    - master
    - staging

cache:
  bundler: true
  yarn: true

before_install:
  # Install curl, unzip
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      sudo apt-get update
      sudo apt-get install curl unzip
    fi

install:
  # Install aws-cli
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
      sudo installer -pkg AWSCLIV2.pkg -target /
    fi

  # Setup aws-credentials based on AWS_ACCESS_KEY and AWS_ACCESS_SECRET
  - |
    chmod +x ./scripts/utils/generate_aws_credentials.sh &&
    ./scripts/utils/generate_aws_credentials.sh

  # Install nodejs and yarn
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      curl -sL https://deb.nodesource.com/setup_12.x | sudo bash
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      sudo apt-get update
      sudo apt-get install nodejs yarn -y
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      brew install node yarn
    fi

  # Install ruby bundler
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      sudo apt-get install ruby-full -y
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      brew install ruby
    fi
  - gem install bundler

before_script:
  # Check environmental tools
  - echo Node $(node --version)
  - echo Gem $(gem --version)
  - echo Bundle $(bundle --version)
  - echo AWS $(aws --version)

  # Install dependencies
  - yarn install
  - bundle install

  # Decrypt secrets inside ./secrets folder
  - openssl aes-256-cbc -K $encrypted_0c8377fdb45e_key -iv $encrypted_0c8377fdb45e_iv -in ./secrets/firebase.token.enc -out ./secrets/firebase.token -d
  - openssl aes-256-cbc -K $encrypted_dbcbaea3fa1e_key -iv $encrypted_dbcbaea3fa1e_iv -in ./secrets/keystore.keystore.enc -out ./secrets/keystore.keystore -d
  - openssl aes-256-cbc -K $encrypted_8026183efba4_key -iv $encrypted_8026183efba4_iv -in ./secrets/Unity_lic.ulf.enc -out ./secrets/Unity_lic.ulf -d

  - source ./scripts/ci/steps/env.sh

_test_job: &test_job
  stage: test
  services:
    - docker
  env: TEST_PLATFORM=editmode IMAGE_NAME=ngtrhieu/unity3d
  script:
    - chmod +x ./scripts/ci_test.sh
    - ./scripts/ci_test.sh
  after_script:
    - aws s3 sync ./test_results s3://${BUILD_BUCKET}/report_${TEST_PLATFORM}_${BUILD_TARGET}_${SEMATIC_VERSION}_${TRAVIS_BUILD_NUMBER}

_build_job: &build_job
  stage: build
  services:
    - docker
  script:
    - chmod +x ./scripts/ci_build.sh
    - ./scripts/ci_build.sh
  after_success:
    - aws s3 sync ${BUILD_PATH} s3://${BUILD_BUCKET}/${BUILD_TARGET}_${SEMATIC_VERSION}_${TRAVIS_BUILD_NUMBER}
    - aws s3 sync ./unity/ServerData s3://${CONTENT_BUCKET}

_deploy_job: &deploy_job
  stage: deploy
  script:
    - mkdir -p ${BUILD_PATH}
    - aws s3 cp s3://${BUILD_BUCKET}/${BUILD_TARGET}_${SEMATIC_VERSION}_${TRAVIS_BUILD_NUMBER} ${BUILD_PATH} --recursive

    - chmod +x ./scripts/ci/steps/env.sh
    - source ./scripts/ci/steps/env.sh
    - |
      if [ $BUILD_TARGET = 'Android' ]; then
        bundle exec fastlane android distribute;
      elif [ $BUILD_TARGET = 'iOS' ]; then
        bundle exec fastlane ios distribute;
      fi

jobs:
  include:
    - name: EditMode Test
      env: TEST_PLATFORM=editmode IMAGE_NAME=ngtrhieu/unity3d
      <<: *test_job

    - name: PlayMode Test
      env: TEST_PLATFORM=playmode IMAGE_NAME=ngtrhieu/unity3d
      <<: *test_job

    - name: Build Android
      env: BUILD_TARGET=Android IMAGE_NAME=ngtrhieu/unity3d-android
      <<: *build_job

    - name: Build iOS
      env: BUILD_TARGET=iOS IMAGE_NAME=ngtrhieu/unity3d-ios
      <<: *build_job

    - name: Archive iOS
      stage: archive
      os: osx
      osx_image: xcode11.6
      language: objective-c
      env: BUILD_TARGET=iOS
      script:
        - aws s3 cp s3://${BUILD_BUCKET}/${BUILD_TARGET}_${SEMATIC_VERSION}_${TRAVIS_BUILD_NUMBER} ${BUILD_PATH} --recursive
        - chmod +x ./scripts/ci/steps/env.sh
        - source ./scripts/ci/steps/env.sh

        # Since these .sh files are created from another machine
        # Need to chmod +x these
        - chmod +x ${IOS_XCODE_PROJECT_PATH}/MapFileParser.sh
        - chmod +x ${IOS_XCODE_PROJECT_PATH}/process_symbols.sh

        - bundle exec fastlane ios archive
      after_script:
        - aws s3 sync ${BUILD_PATH} s3://${BUILD_BUCKET}/${BUILD_TARGET}_${SEMATIC_VERSION}_${TRAVIS_BUILD_NUMBER}

    - name: Deploy Android
      env: BUILD_TARGET=Android
      <<: *deploy_job

    - name: Deploy iOS
      env: BUILD_TARGET=iOS
      <<: *deploy_job
