language: shell

os: linux
dist: xenial

# Define stage order
stages:
  - test # Run unit tests, make sure all tests passed
  - build # Build content, apk, xcode proj, ...
  - ios-build # (ios only) build xcode to iap
  - deploy # Upload build to app distribution (master) or app store/google play (staging/production)

branches:
  only:
    - master
    - staging

cache:
  bundler: true
  yarn: true
  # directories:
  #   - $HOME/docker

before_install:
  # # Load cached docker images from $HOME/docker
  # - if [[ -d $HOME/docker ]]; then ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi

  # Install curl, unzip
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      sudo apt-get update
      sudo apt-get install curl unzip
    fi

install:
  # Install aws-cli
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - sudo ./aws/install

  # Setup aws-credentials based on ARTIFACTS_KEY and ARTIFACTS_SECRET
  - chmod +x ./scripts/utils/aws_credentials.sh
  - ./scripts/utils/aws_credentials.sh

  # Install nodejs and yarn
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      curl -sL https://deb.nodesource.com/setup_12.x | sudo bash
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      sudo apt-get update
      sudo apt-get install nodejs yarn -y
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      brew install node yarn
    fi

  # Install ruby bundler
  - |
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      sudo apt-get install ruby-full -y
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      brew install ruby
    fi
  - gem install bundler

before_script:
  # Check
  - echo Node $(node --version)
  - echo Gem $(gem --version)
  - echo Bundle $(bundle --version)
  - echo AWS $(aws --version)

  # Install dependencies
  - yarn install
  - bundle install

  # Decrypt secrets inside ./secrets folder
  - openssl aes-256-cbc -K $encrypted_dbcbaea3fa1e_key -iv $encrypted_dbcbaea3fa1e_iv -in ./secrets/keystore.keystore.enc -out ./secrets/keystore.keystore -d
  - openssl aes-256-cbc -K $encrypted_8026183efba4_key -iv $encrypted_8026183efba4_iv -in ./secrets/Unity_lic.ulf.enc -out ./secrets/Unity_lic.ulf -d
  - openssl aes-256-cbc -K $encrypted_0c8377fdb45e_key -iv $encrypted_0c8377fdb45e_iv -in ./secrets/firebase.token.enc -out ./secrets/firebase.token -d

before_cache:
  # # Save tagged docker images to $HOME/docker folder
  # - mkdir -p $HOME/docker
  # - docker images -a --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}' | xargs -n 2 -t bash -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'

jobs:
  include:
    - stage: test
      services:
        - docker
      name: EditMode Test
      env: TEST_PLATFORM=editmode IMAGE_NAME=ngtrhieu/unity3d
      script:
        - chmod +x ./scripts/ci_test.sh
        - ./scripts/ci_test.sh
      after_script:
        - aws s3 cp ./test_results s3://${BUILD_BUCKET}/report_${BUILD_TARGET}_${TRAVIS_BUILD_NUMBER} --recursive

    - stage: build
      services:
        - docker
      name: Build Android
      env: BUILD_TARGET=Android IMAGE_NAME=ngtrhieu/unity3d-android
      script:
        - chmod +x ./scripts/ci_build.sh
        - ./scripts/ci_build.sh
      after_success:
        - aws s3 cp ./builds s3://${BUILD_BUCKET}/${BUILD_TARGET}_${TRAVIS_BUILD_NUMBER} --recursive
        - aws s3 cp ./unity/ServerData s3://${CONTENT_BUCKET} --recursive

    - stage: build
      services:
        - docker
      name: Build XCode project
      env: BUILD_TARGET=iOS IMAGE_NAME=ngtrhieu/unity3d-ios
      script:
        - chmod +x ./scripts/ci_build.sh
        - ./scripts/ci_build.sh
      after_success:
        - aws s3 cp ./builds s3://${BUILD_BUCKET}/${BUILD_TARGET}_${TRAVIS_BUILD_NUMBER} --recursive
        - aws s3 cp ./unity/ServerData s3://${CONTENT_BUCKET} --recursive

    - stage: ios-build
      name: Build iOS

      # This stage specifically run on osx
      os: osx
      language: objective-c

      script:
        - aws s3 cp s3://${BUILD_BUCKET}/${BUILD_TARGET}_${TRAVIS_BUILD_NUMBER} ./builds --recursive
        - echo "ios_build done"

    - stage: deploy
      if: branch = master
      name: Deploy Android
      env: BUILD_TARGET=Android
      script:
        # Download build artifact
        - mkdir -p ./builds
        - aws s3 cp s3://${BUILD_BUCKET}/${BUILD_TARGET}_${TRAVIS_BUILD_NUMBER} ./builds --recursive
        # Fastlane distribute
        - chmod +x ./scripts/ci_distribute.sh
        - ./scripts/ci_distribute.sh
